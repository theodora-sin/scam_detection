from flask import render_template, request
from app import app,db
from models import ScamType, AnalysisReuslt  
from scam_analyzer import ScamAnalyzer
import logging

analyzer=ScamAnalyzer()

@app.route('/')
def index():
    """Home page with overview and quick analysis form."""
    recent_analyses = AnalysisResult.query.order_by(AnalysisResult.created_at.desc()).limit(5).all()
    return render_template('index.html', recent_analyses=recent_analyses)

@app.route('/analyze', methods=['GET', 'POST'])
def analyze():
    """Analysis page for submitting content to check."""
    if request.method == 'POST':
        content_type = request.form.get('content_type')
        content = request.form.get('content', '').strip()
        
        if not content:
            flash('Please provide content to analyze.', 'error')
            return redirect(url_for('analyze'))
        
        if not content_type or content_type not in ['url', 'email', 'message']:
            flash('Please select a valid content type.', 'error')
            return redirect(url_for('analyze'))
        
        try:
            # Perform analysis
            result = analyzer.analyze_content(content, content_type)
            
            # Save to database
            analysis_result = AnalysisResult(
                content_type=content_type,
                content=content,
                risk_level=result['risk_level'],
                risk_score=result['risk_score'],
                detected_patterns=str(result['detected_patterns']),
                analysis_details=result['analysis_details']
            )
            db.session.add(analysis_result)
            db.session.commit()
            
            return redirect(url_for('results', analysis_id=analysis_result.id))
            
        except Exception as e:
            logging.error(f"Analysis error: {str(e)}")
            flash('An error occurred during analysis. Please try again.', 'error')
            return redirect(url_for('analyze'))
    
    return render_template('analyze.html')

@app.route('/results/<int:analysis_id>')
def results(analysis_id):
    """Display analysis results."""
    analysis = AnalysisResult.query.get_or_404(analysis_id)
    
    # Parse detected patterns back to list
    try:
        detected_patterns = eval(analysis.detected_patterns) if analysis.detected_patterns else []
    except:
        detected_patterns = []
    
    return render_template('results.html', 
                         analysis=analysis, 
                         detected_patterns=detected_patterns)

@app.route('/education')
def education():
    """Educational resources page."""
    scam_types = ScamType.query.all()
    return render_template('education.html', scam_types=scam_types)

@app.route('/scam-types')
def scam_types():
    """Detailed scam types database page."""
    search_query = request.args.get('search', '').strip()
    
    if search_query:
        scam_types = ScamType.query.filter(
            db.or_(
                ScamType.name.ilike(f'%{search_query}%'),
                ScamType.description.ilike(f'%{search_query}%'),
                ScamType.warning_signs.ilike(f'%{search_query}%')
            )
        ).all()
    else:
        scam_types = ScamType.query.all()
    
    return render_template('scam_types.html', 
                         scam_types=scam_types, 
                         search_query=search_query)

@app.route('/scam-type/<int:scam_id>')
def scam_detail(scam_id):
    """Detailed view of a specific scam type."""
    scam_type = ScamType.query.get_or_404(scam_id)
    return render_template('scam_detail.html', scam_type=scam_type)

@app.errorhandler(404)
def not_found_error(error):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    db.session.rollback()
    return render_template('500.html'), 500
