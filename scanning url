from flask import Flask, request, jsonify
from flask_socketio import SocketIO, emit
import requests
import base64

app = Flask(__name__)
socketio = SocketIO(app)

def check_url_virustotal(url):
    """FIXED: Your VirusTotal function with proper error handling"""
    api_key = ""  # Replace with your actual API key
    
    if not api_key:
        return {'status': 'error', 'details': 'VirusTotal API key not configured', 'score': 0}

    try:
        # Base64 encode the URL
        encoded_url = base64.urlsafe_b64encode(url.encode()).decode().strip("=")
        
        headers = {'x-apikey': api_key}
        
        # Make API request to VirusTotal
        response = requests.get(f'https://www.virustotal.com/api/v3/urls/{encoded_url}', 
                              headers=headers, timeout=15)
        
        if response.status_code == 200:
            result = response.json()
            
            if 'data' in result:
                # Get the analysis stats to determine if the URL is safe or dangerous
                analysis_stats = result['data']['attributes']['last_analysis_stats']
                
                # Calculate detailed scoring
                malicious_count = analysis_stats.get('malicious', 0)
                suspicious_count = analysis_stats.get('suspicious', 0)
                clean_count = analysis_stats.get('harmless', 0)
                undetected_count = analysis_stats.get('undetected', 0)
                total_engines = malicious_count + suspicious_count + clean_count + undetected_count
                
                # Calculate risk score (0-100)
                if total_engines > 0:
                    risk_percentage = ((malicious_count * 2 + suspicious_count) / total_engines) * 100
                    score = min(risk_percentage * 1.5, 100)  # Amplify for better detection
                else:
                    score = 0
                
                # Determine status based on results
                if malicious_count > 0:
                    status = 'dangerous'
                elif suspicious_count > 0:
                    status = 'suspicious'
                elif clean_count > 0:
                    status = 'safe'
                else:
                    status = 'unknown'
                
                return {
                    'status': status,
                    'details': analysis_stats,
                    'score': int(score),
                    'malicious_engines': malicious_count,
                    'suspicious_engines': suspicious_count,
                    'clean_engines': clean_count,
                    'total_engines': total_engines,
                    'analysis_date': result['data']['attributes'].get('last_analysis_date', 'Unknown')
                }
            else:
                return {
                    'status': 'not_found', 
                    'details': 'URL not found in VirusTotal database', 
                    'score': 0,
                    'message': 'This URL has not been scanned by VirusTotal yet'
                }
        
        elif response.status_code == 404:
            return {
                'status': 'not_found', 
                'details': 'URL not in VirusTotal database', 
                'score': 0,
                'message': 'URL not previously analyzed'
            }
        
        elif response.status_code == 429:
            return {
                'status': 'rate_limited', 
                'details': 'VirusTotal API rate limit exceeded', 
                'score': 25,
                'message': 'Too many requests, please try again later'
            }
        
        else:
            return {
                'status': 'error', 
                'details': f'VirusTotal API returned status {response.status_code}', 
                'score': 25,
                'message': 'API request failed'
            }
            
    except requests.exceptions.Timeout:
        return {
            'status': 'timeout', 
            'details': 'VirusTotal API request timed out', 
            'score': 25,
            'message': 'Request timed out, please try again'
        }
    
    except requests.exceptions.RequestException as e:
        return {
            'status': 'network_error', 
            'details': f'Network error: {str(e)}', 
            'score': 25,
            'message': 'Network connection failed'
        }
    
    except Exception as e:
        return {
            'status': 'error', 
            'details': f'Unexpected error: {str(e)}', 
            'score': 25,
            'message': 'An unexpected error occurred'
        }

# Route for scanning a URL (if you run this file standalone)
@app.route('/scan_url', methods=['POST'])
def scan_url():
    """Scan URL endpoint for standalone usage"""
    try:
        data = request.json
        url = data.get('url', '').strip()
        
        if not url:
            return jsonify({"status": "error", "message": "No URL provided"}), 400
        
        # Add protocol if missing
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        
        # Call the VirusTotal check function
        result = check_url_virustotal(url)
        
        # Add the original URL to the result
        result['url'] = url
        
        return jsonify(result)
        
    except Exception as e:
        return jsonify({
            "status": "error", 
            "message": f"Scan failed: {str(e)}",
            "score": 50
        }), 500

@socketio.on('connect')
def handle_connect():
    """Handle WebSocket connection"""
    print('User connected to VirusTotal scanner')
    emit('alert', {'message': 'Connected to VirusTotal scanning service'})

@socketio.on('virustotal_scan')
def handle_virustotal_scan(data):
    """Handle real-time VirusTotal scanning via WebSocket"""
    try:
        url = data.get('url', '').strip()
        
        if not url:
            emit('scan_error', {'message': 'No URL provided'})
            return
        
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        
        # Emit progress
        emit('scan_progress', {
            'stage': 'Querying VirusTotal database...',
            'progress': 50
        })
        
        # Perform VirusTotal scan
        result = check_url_virustotal(url)
        result['url'] = url
        
        emit('scan_progress', {
            'stage': 'VirusTotal scan complete!',
            'progress': 100
        })
        
        # Send results
        emit('virustotal_complete', result)
        
    except Exception as e:
        emit('scan_error', {'message': f'VirusTotal scan failed: {str(e)}'})




